# -*- coding: utf-8 -*-
"""Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g5eFm3Tis1pKRFuEuIIuKE9hkGiWtlNe
"""

import tensorflow as tf
import io
import json
import json.tool
import os
import base64
import cv2
import matplotlib.pyplot as plt
from imageio.v2 import imread
from os.path import isfile, join
from os import listdir
from google.colab import drive
drive.mount('/content/drive')

# Directorio donde estan los archivos json
data_path = '/content/drive/MyDrive/dataset'
data = [] #se almacenan los datos de las imágenes

#ahora para recorrer los archivos dentro de la carpeta
for filename in os.listdir(data_path):
    if filename.endswith('.json'):
        with open(os.path.join(data_path, filename)) as f:
            data += json.load(f)

   # Sacamos parámetros de interés
    str_image = data['image_data']
    slice_datos = str_image[:44]
    escalax = data['image_w']
    escalay = data['image_h']
    id_nang = data['nangle_idx']
    id_tang = data['tangle_idx']
    nval = data['angles'][id_nang]['x0']
    tval = data['angles'][id_tang]['x0']
    n_iris_w = data['n_iris_w']
    t_iris_w = data['t_iris_w']
    n_iris3 = data['n_iris3']
    t_iris3 = data['t_iris3']

# Escalamos valores
    px1 = data['lines'][idx]['x1']*escalax
    py1 = data['lines'][idx]['y1']*escalay

    px2 = data['lines'][idx]['x2']*escalax
    py2 = data['lines'][idx]['y2']*escalay

    # Pasamos a string y recortamos imagen (referencias y demás)
    img = imread(io.BytesIO(base64.b64decode(str_image)))
    top = 114
    bottom = 1305
    left = 110
    right = 1955
    image_oct = img[top:bottom, left:right]

    half = int(image_oct.shape[1]/2)
    # Recortamos lado izquierdo y derecho
    imgL = image_oct[ :, :half, :]
    imgR = image_oct[ :, half+1:, : ]

    nwl = 'none'
    n3l = 'none'
    twr = 'none'
    t3r = 'none'
    nwr = 'none'
    n3r = 'none'
    twl = 'none'
    t3l = 'none'

    # Indicamos lado nasal y temporal
    if (nval < tval):
        sideL = 'N'
        sideR = 'T'
        nwl = float(n_iris_w.replace(' mm',''))
        n3l = float( n_iris3.replace(' mm', ''))
        twr = float(t_iris_w.replace(' mm',''))
        t3r = float(t_iris3.replace(' mm',''))

    else:
        sideL = 'T'
        sideR = 'N'
        nwr = float(n_iris_w.replace(' mm',''))
        n3r = float(n_iris3.replace(' mm', ''))
        twl = float(t_iris_w.replace(' mm',''))
        t3l = float(t_iris3.replace(' mm',''))

    cv2.imwrite(join('ImagesL', "tempL.png"), imgL)
    with open('ImagesL/tempL.png', "rb") as imageFile:
        str_imageL = base64.b64encode(imageFile.read())
        str_imageL = str_imageL.decode('utf-8')

    dicL={
        "side": sideL,
        "px": px1,
        "py": py1,
        "nirisw": nwl,
        "niris3": n3l,
        "tirisw": twl,
        "tiris3": t3l,
        "image": str_imageL,
        }

    with open('dataset/'+f[:-4]+'L.json', 'w') as file:
      opts = jsbeautifier.default_options()
      opts.indent_size = 2
      file.write(jsbeautifier.beautify(json.dumps(dicL), opts))

    cv2.imwrite(join('ImagesR', "tempR.png"), imgR)
    with open('ImagesR/tempR.png', "rb") as imageFile:
        str_imageR = base64.b64encode(imageFile.read())
        str_imageR = str_imageR.decode('utf-8')

    dicR={
        "side": sideR,
        "px": px2,
        "py": py2,
        "nirisw": nwr,
        "niris3": n3r,
        "tirisw": twr,
        "tiris3": t3r,
        "image": str_imageR,
        }

    with open('dataset/'+f[:-4]+'R.json', 'w') as file:
      opts = jsbeautifier.default_options()
      opts.indent_size = 2
      file.write(jsbeautifier.beautify(json.dumps(dicR), opts))